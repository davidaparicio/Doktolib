#!/bin/bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Print banner
echo "=========================================="
echo "🏗️  Doktolib S3 Bucket Terraform Job"
echo "=========================================="

# Validate required environment variables
print_status "Validating environment variables..."

required_vars=(
    "AWS_ACCESS_KEY_ID"
    "AWS_SECRET_ACCESS_KEY"
    "TF_VAR_bucket_name"
    "TF_VAR_aws_region"
)

missing_vars=()
for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        missing_vars+=("$var")
    fi
done

if [ ${#missing_vars[@]} -ne 0 ]; then
    print_error "Missing required environment variables:"
    for var in "${missing_vars[@]}"; do
        echo "  - $var"
    done
    exit 1
fi

print_success "All required environment variables are set"

# Set default values for optional variables
export TF_VAR_environment="${TF_VAR_environment:-production}"
export TF_VAR_allowed_origins="${TF_VAR_allowed_origins:-[\"https://doktolib.com\",\"https://app.doktolib.com\"]}"

# Print configuration
print_status "Configuration:"
echo "  - Bucket Name: $TF_VAR_bucket_name"
echo "  - AWS Region: $TF_VAR_aws_region"
echo "  - Environment: $TF_VAR_environment"
echo "  - Allowed Origins: $TF_VAR_allowed_origins"

# Initialize Terraform
print_status "Initializing Terraform..."
terraform init -no-color

if [ $? -ne 0 ]; then
    print_error "Terraform initialization failed"
    exit 1
fi

print_success "Terraform initialized successfully"

# Validate Terraform configuration
print_status "Validating Terraform configuration..."
terraform validate -no-color

if [ $? -ne 0 ]; then
    print_error "Terraform configuration validation failed"
    exit 1
fi

print_success "Terraform configuration is valid"

# Handle different commands
command="${1:-apply}"

case "$command" in
    "plan")
        print_status "Creating Terraform plan..."
        terraform plan -no-color -out=tfplan
        
        if [ $? -eq 0 ]; then
            print_success "Terraform plan created successfully"
        else
            print_error "Terraform plan failed"
            exit 1
        fi
        ;;
        
    "apply")
        print_status "Applying Terraform configuration..."
        
        # Create plan first
        terraform plan -no-color -out=tfplan
        
        if [ $? -ne 0 ]; then
            print_error "Terraform plan failed"
            exit 1
        fi
        
        # Apply the plan
        terraform apply -no-color -auto-approve tfplan
        
        if [ $? -eq 0 ]; then
            print_success "S3 bucket created successfully"
            
            # Output important information
            print_status "Terraform outputs:"
            terraform output -no-color
            
            # Save outputs to file for Qovery
            terraform output -json > /tmp/terraform-outputs.json
            
            if [ -f /tmp/terraform-outputs.json ]; then
                print_status "Terraform outputs saved to /tmp/terraform-outputs.json"
                
                # Extract important values for easy access
                bucket_name=$(terraform output -raw bucket_name 2>/dev/null || echo "")
                bucket_arn=$(terraform output -raw bucket_arn 2>/dev/null || echo "")
                access_key_id=$(terraform output -raw app_user_access_key_id 2>/dev/null || echo "")
                
                if [ -n "$bucket_name" ]; then
                    print_success "S3 Bucket Name: $bucket_name"
                fi
                
                if [ -n "$bucket_arn" ]; then
                    print_success "S3 Bucket ARN: $bucket_arn"
                fi
                
                if [ -n "$access_key_id" ]; then
                    print_warning "Access Key ID: $access_key_id (Secret key in outputs)"
                fi
                
                # Create environment file for easy integration
                cat > /tmp/s3-env-vars.txt << EOF
# S3 Environment Variables (generated by Terraform)
AWS_S3_BUCKET=$bucket_name
AWS_S3_BUCKET_ARN=$bucket_arn
AWS_ACCESS_KEY_ID=$access_key_id
# AWS_SECRET_ACCESS_KEY available in Terraform outputs (sensitive)
EOF
                print_status "Environment variables saved to /tmp/s3-env-vars.txt"
            fi
            
        else
            print_error "Terraform apply failed"
            exit 1
        fi
        ;;
        
    "destroy")
        print_status "Destroying S3 bucket infrastructure..."
        print_warning "This will permanently delete the S3 bucket and all its contents!"
        print_warning "Make sure to backup any important files before proceeding."
        
        # Add a 10-second delay for safety
        print_status "Starting destruction in 10 seconds..."
        sleep 10
        
        terraform destroy -no-color -auto-approve
        
        if [ $? -eq 0 ]; then
            print_success "S3 bucket infrastructure destroyed successfully"
        else
            print_error "Failed to destroy S3 bucket infrastructure"
            exit 1
        fi
        ;;
        
    "output")
        print_status "Displaying Terraform outputs..."
        terraform output -no-color
        ;;
        
    "validate")
        print_status "Terraform configuration validation completed successfully"
        ;;
        
    *)
        print_error "Unknown command: $command"
        echo "Available commands:"
        echo "  - plan: Create Terraform execution plan"
        echo "  - apply: Apply Terraform configuration (default)"
        echo "  - destroy: Destroy S3 bucket infrastructure"
        echo "  - output: Display Terraform outputs"
        echo "  - validate: Validate Terraform configuration"
        exit 1
        ;;
esac

print_status "Terraform job completed successfully"
echo "=========================================="